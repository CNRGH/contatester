stages:
  - prepare
  - build
  - test
  - distribute
  - build_image
  - test_image
  - release_image
  - clean


image: registry.cnrgh.fr/images/sources/ibfj-bioinfo-analysis-r:latest


variables:
  #DOCKER_DRIVER:        overlay2
  LANG:                 'en_US.UTF-8'
  DOCKER_REPO:          'registry.cnrgh.fr/$CI_PROJECT_NAMESPACE/contatester/'
  IMAGE_NAME:           'contatester'
  CONTAINER_NAME:       'contatester'
  CONTATESTER_VERSION:  '1.0.0'

.active_python_venv:
  before_script:
    - source venv/bin/activate
    - export R_LIBS="$(pwd)/rlib:/ur/lib64/Rlibrary"
    - yum install -y libcurl openssl

.docker_jobs:
  image: docker:stable
  tags:
    - dind
  cache:
    key: ${CI_PIPELINE_ID}-docker_lbi-1
    untracked: true
  # No var expansion as bash do see: https://www.trek10.com/blog/making-ci-easier-with-gitlab/
  before_script:
    - eval export IMAGE_FILE="contatester-${CI_COMMIT_SHORT_SHA}.tar.gz"
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin registry.cnrgh.fr

.cleaning_docker:
  stage: prepare
  extends: .docker_jobs
  script:
    - for i in $(docker images | grep contatester | tr -s ' ' | cut -d ' ' -f3 ); do docker rmi -f $i ; done
    - for i in $(docker images | grep none | tr -s ' ' | cut -d ' ' -f3 ); do docker rmi -f $i ; done
    - for i in $(docker ps -a | grep Exited | tr -s ' ' | cut -d ' ' -f1 ); do docker rm -f $i ; done 
    - docker images
    - docker ps -a

    
.info_docker:
  stage: prepare
  extends: .docker_jobs
  script:
    - echo "$CI_COMMIT_REF_NAME | $CI_COMMIT_REF_SLUG"
    - docker ps -a 
    - for i in $(docker ps -a | grep runner | tr -s ' ' | cut -d ' ' -f1); do echo $i ; docker inspect $i; done
    - docker volume ls
    - docker ps -q -f "label=com.gitlab.gitlab-runner.job.ref=$CI_COMMIT_REF_NAME" -f "label=com.gitlab.gitlab-runner.type=cache"
    - docker ps -aq -f "label=com.gitlab.gitlab-runner.job.ref=$CI_COMMIT_REF_NAME" -f "label=com.gitlab.gitlab-runner.type=cache"
    - docker ps -q -f "label=com.gitlab.gitlab-runner.type=cache"
    - docker ps -aq -f "label=com.gitlab.gitlab-runner.type=cache" 
    - docker ps -q -f "label=com.gitlab.gitlab-runner.job.ref=$CI_COMMIT_REF_NAME"
    - docker ps -aq -f "label=com.gitlab.gitlab-runner.job.ref=$CI_COMMIT_REF_NAME"
    - for i in $(docker volume ls | grep local | tr -s ' ' | cut -d ' ' -f2); do echo $i ; docker volume inspect $i; done 


prepare_python_env:
  stage: prepare
  tags:
    - nodind
  cache:
    key: ${CI_COMMIT_REF_SLUG}-1
    untracked: true
    paths:
      - venv
      - rlib
  artifacts:
    untracked: true
    paths:
      - venv
      - rlib
  before_script:
    - yum install -y libcurl-devel g++ openssl-devel
    - python3 -m venv venv
    - source venv/bin/activate
  script:
    - pip3 install setuptools wheel
    - pip3 install --upgrade pip
    - pip3 install --upgrade wheel
    - pip3 install --upgrade setuptools
    - mkdir -p rlib
    - echo -e ".libPaths('$(pwd)/rlib')\noptions(repos = c(CRAN = 'https://cran.rstudio.com'))" > .Rprofile
    - export R_LIBS="$(pwd)/rlib:/ur/lib64/Rlibrary"
    - ./rPackageInstaller.r


build_contatester:
  stage: build
  extends: .active_python_venv
  artifacts:
    untracked: true
    paths:
      - dist/contatester-${CONTATESTER_VERSION}-py2.py3-none-any.whl
  script:
    - sed -r "/VERSION\s+=\s+'/s/[0-9\.]+/${CONTATESTER_VERSION}/g" setup.py
    - python3 setup.py clean
    - python3 setup.py bdist_wheel


test_all:
  stage: test
  extends: .active_python_venv
  artifacts:
   untracked: true
  script:
    - pip3 install dist/contatester-${CONTATESTER_VERSION}-py2.py3-none-any.whl
    - ./run_tests.sh 


coverage_contatester:
  stage: test
  extends: .active_python_venv
  artifacts:
    name: reports
    paths:
      - htmlcov/*
  script:
    - pip3 install coverage
    - python3 setup.py coverage


wheel_contatester:
  stage: distribute
  extends: .active_python_venv
  artifacts:
    name: wheel
    paths:
      - dist/contatester-${CONTATESTER_VERSION}-py2.py3-none-any.whl
  script:
    - python3 setup.py bdist_wheel


build_contatester_image:
  stage: build_image
  extends: .docker_jobs
  artifacts:
    name: docker_image
    paths:
      #- ${CI_COMMIT_SHA}/image/contatester-*.tar.gz   # Artifacts can only exist in directories relative to the build directory
                                                      # Only predefined variables can be used which exclude variables define in script section
    expire_in: 3d
  script:
    #- mkdir -p ${CI_COMMIT_SHA}/image/
    #- archive_file="contatester_src_$(date +'%s').tar.gz" # prevent docker cache
    #- |
    #  tar czf "${archive_file}" rlib dist/contatester-${CONTATESTER_VERSION}-py2.py3-none-any.whl
    #- du -sh rlib dist/contatester-${CONTATESTER_VERSION}-py2.py3-none-any.whl "${archive_file}"
    - docker images
    - |
      docker build \
              --build-arg CONTATESTER_VERSION="${CONTATESTER_VERSION}" \
              -t "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" .
    #- docker save "${DOCKER_REPO}${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}" | gzip -c > "${CI_COMMIT_SHA}/image/${IMAGE_FILE}"
    - docker push "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}"
    - docker images


test_contatester_image:
  stage: test_image
  extends: .docker_jobs
  script:
    #- docker load --input "${CI_COMMIT_SHA}/image/${IMAGE_FILE}"
    - docker pull "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}"
    #- echo "CI_RUNNER_ID -> $CI_RUNNER_ID | CI_JOB_ID -> $CI_JOB_ID"
    #- docker ps -aq -f "label=com.gitlab.gitlab-runner.job.id=$CI_JOB_ID" -f "label=com.gitlab.gitlab-runner.type=build"
    #- for i in $(docker ps -aq -f "label=com.gitlab.gitlab-runner.job.ref=$CI_COMMIT_REF_NAME" -f "label=com.gitlab.gitlab-runner.type=cache"); do echo $i ; docker inspect $i; done 
    #- for i in $(docker ps -a | grep runner | tr -s ' ' | cut -d ' ' -f1); do echo $i ; docker inspect $i; done 
    #- for i in $(docker volume ls | grep local | tr -s ' ' | cut -d ' ' -f2); do echo $i ; docker volume inspect $i; done 
    - cache_container_id=$(docker ps -a -q -f "label=com.gitlab.gitlab-runner.job.id=$CI_JOB_ID" -f "label=com.gitlab.gitlab-runner.type=build")
    #- echo ${cache_container_id}
    - cwd=$(pwd)
    #- echo "${cwd}"
    - sed -i 's|^|'"${cwd}/"'|' data_examples/vcfs_list.txt
    - |
      docker run --rm \
                 --name="${CONTAINER_NAME}-${CI_COMMIT_SHORT_SHA}-0" \
                 "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" -h
    # For docker in docker, need to mount volume from host machine
    - |
      docker run --rm \
                 --name="${CONTAINER_NAME}-${CI_COMMIT_SHORT_SHA}-3" \
                 --volumes-from "${cache_container_id}" \
                 "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" -t 1 -f "${cwd}"/data_examples/test_1.vcf.gz -o /my_out_dir
    - |
      docker run --rm \
                 --name="${CONTAINER_NAME}-${CI_COMMIT_SHORT_SHA}-4" \
                 --volumes-from "${cache_container_id}" \
                 "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" -t 1 -l "${cwd}"/data_examples/vcfs_list.txt -o /my_out_dir
    # For simple docker use :
    #- |
    #  docker run --rm \
    #             --name="${CONTAINER_NAME}-${CI_COMMIT_SHORT_SHA}-3" \
    #             --volume "$(pwd)"/data_examples:/data_examples \
    #             --volume "$(pwd)"/my_out_dir:/my_out_dir \
    #             "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" -f /data_examples/test_1.vcf.gz -o /my_out_dir
    #- |
    #  docker run --rm \
    #             --name="${CONTAINER_NAME}-${CI_COMMIT_SHORT_SHA}-4" \
    #             --volume "$(pwd)"/data_examples:/data_examples \
    #             --volume "$(pwd)"/my_out_dir:/my_out_dir \
    #             "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" -l /data_examples/vcfs_list.txt -o /my_out_dir


master_image:
  stage: release_image
  extends: .docker_jobs
  script:
    #- docker load --input "${CI_COMMIT_SHA}/image/${IMAGE_FILE}"
    - docker pull "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}"
    - docker tag  "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" ${DOCKER_REPO}${IMAGE_NAME}:latest
    - docker push "${DOCKER_REPO}${IMAGE_NAME}:latest"
  only:
    - master


release_master_image:
  stage: release_image
  extends: .docker_jobs
  script:
    #- docker load --input "${CI_COMMIT_SHA}/image/${IMAGE_FILE}"
    - docker pull "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}"
    - docker tag  "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" "${DOCKER_REPO}${IMAGE_NAME}:${CONTATESTER_VERSION}"
    - docker push "${DOCKER_REPO}${IMAGE_NAME}:${CONTATESTER_VERSION}"
  only:
    - tags


remove image:
  stage: clean
  extends: .docker_jobs
  when: always
  script:
    - docker images
    - docker rm -f "${CONTAINER_NAME}-${CI_COMMIT_SHORT_SHA}-*"  || true
    # Stop any running containers, if they are not running anymore (since its not a run -d), ignore errors about that.
    - docker rm -f "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" ${IMAGE_NAME} || true
    # Remove pulled images
    - docker rmi -f "${DOCKER_REPO}${IMAGE_NAME}-devel:${CI_COMMIT_SHORT_SHA}" || true
    # Remove pulled images
    - docker rmi -f "${DOCKER_REPO}${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}" || true
    # Remove all images (current et previouslys build container missed) [Optional]
    #- docker images | awk -v pattern="${DOCKER_REPO}${IMAGE_NAME}" '{if( $1 ~ /^pattern/ ){ print $1":"$2; system(docker rmi -f $1":"$2) }}'
    - docker images


docker remove all temp files:
  stage: clean
  when: always
  cache:
    key: ${CI_PIPELINE_ID}-docker_lbi-1
  script:
    - rm -fr ${CI_COMMIT_SHA}/


python remove all temp files:
  stage: clean
  when: always
  cache:
    key: ${CI_PIPELINE_ID}-py_lbi-1
  script:
    - rm -fr .eggs .pytest_cache/ build/ dist/ htmlcov/ src/contatester.egg-info/
    - find . -name __pycache__ | xargs rm -fr
