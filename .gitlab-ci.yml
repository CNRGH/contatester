stages:
  - build
  - test
  - distribute
  - build_image
  - test_image
  - release_image
  - clean


image: registry.cnrgh.fr/images/sources/python-36-centos7:latest


variables:
  DOCKER_DRIVER:  overlay2
  LANG:           'en_US.UTF-8'
  DOCKER_REPO:    'registry.cnrgh.fr/$CI_PROJECT_NAMESPACE/contatester/'
  IMAGE_NAME:     'contatester'

.prepare_python_env:
  tags:
    - nodind
  cache:
    key: py_lbi
    untracked: true
  before_script:
    - pip3 install setuptools wheel
    - pip3 install --upgrade pip
    - pip3 install --upgrade wheel
    - pip3 install --upgrade setuptools

.docker_jobs:
  image: docker
  tags:
    - dind
  cache:
    key: docker_lbi
    untracked: true
  # No var expansion as bash do see: https://www.trek10.com/blog/making-ci-easier-with-gitlab/
  before_script:
    - eval export TODAY=$(date +'%Y%m%d')
    - eval export CI_SHORT_COMMIT_SHA="${CI_COMMIT_SHA:0:8}"
    - eval export TEST_IMAGE_TAG="${TODAY}_${CI_SHORT_COMMIT_SHA}"
    - eval export IMAGE_FILE="contatester-${TEST_IMAGE_TAG}.tar.gz"
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin registry.cnrgh.fr

build_contatester:
  extends: .prepare_python_env
  stage: build
  script:
    - python3 setup.py clean
    - python3 setup.py build


test_contatester:
  extends: .prepare_python_env
  stage: test
  script:
    - python3 setup.py test


coverage_contatester:
  extends: .prepare_python_env
  stage: test
  artifacts:
    name: reports
    paths:
      - htmlcov/*
  script:
    - pip3 install coverage
    - python3 setup.py coverage


wheel_contatester:
  extends: .prepare_python_env
  stage: distribute
  artifacts:
    name: wheel
    paths:
      - dist/contatester-*.whl
  script:
    - python3 setup.py bdist_wheel


build_contatester_image:
  stage: build_image
  extends: .docker_jobs
  artifacts:
    name: docker_image
    paths:
      - ${CI_COMMIT_SHA}/image/contatester-*.tar.gz   # Artifacts can only exist in directories relative to the build directory
                                                      # Only predefined variables can be used which exclude variables define in script section
    expire_in: 3d
  script:
    - mkdir -p ${CI_COMMIT_SHA}/image/
    - archive_file="contatester_src_$(date +'%s').tar.gz" # prevent docker cache
    - |
      # [workaround] Create an archive in order to not create multiple COPY directory and save some docker layers
      tar czf "${archive_file}" data/               \
                                LICENSE             \
                                README.md           \
                                requirements.txt    \
                                scripts/            \
                                setup.cfg           \
                                setup.py            \
                                src/
    - docker build --build-arg ARCHIVE_FILE=${archive_file} -t "${DOCKER_REPO}${IMAGE_NAME}:${TEST_IMAGE_TAG}" .
    - docker save "${DOCKER_REPO}${IMAGE_NAME}:${TEST_IMAGE_TAG}" | gzip -c > "${CI_COMMIT_SHA}/image/${IMAGE_FILE}"
    - du -sh ${CI_COMMIT_SHA}/image/contatester-*.tar.gz


test_contatester_image:
  stage: test_image
  extends: .docker_jobs
  script:
    - docker load --input "${CI_COMMIT_SHA}/image/${IMAGE_FILE}"
    - |
      docker run --volume $(pwd)/data_examples/test_1.vcf.gz:/test_1.vcf.gz \
                 --volume $(pwd)/data_examples/test_2.vcf.gz:/test_2.vcf.gz \
                 "${DOCKER_REPO}${IMAGE_NAME}:${TEST_IMAGE_TAG}" -l data_examples/vcfs_list.txt

master_image:
  stage: release_image
  extends: .docker_jobs
  script:
    - docker load --input "${CI_COMMIT_SHA}/image/${IMAGE_FILE}"
    - docker tag  "${DOCKER_REPO}${IMAGE_NAME}:${TEST_IMAGE_TAG}" ${DOCKER_REPO}${IMAGE_NAME}:latest
    - docker push "${DOCKER_REPO}${IMAGE_NAME}:latest"
  only:
    - master


release_image:
  stage: release_image
  extends: .docker_jobs
  script:
    - docker load --input "${CI_COMMIT_SHA}/image/${IMAGE_FILE}"
    - docker tag  "${DOCKER_REPO}${IMAGE_NAME}:${TEST_IMAGE_TAG}" "${DOCKER_REPO}${IMAGE_NAME}:${CI_COMMIT_TAG}"
    - docker push "$${DOCKER_REPO}{IMAGE_NAME}:${CI_COMMIT_TAG}"
  only:
    - tags


remove image:
  stage: clean
  extends: .docker_jobs
  when: always
  script:
    - docker images
    # Stop any running containers, if they are not running anymore (since its not a run -d), ignore errors about that.
    - docker rm -f "${DOCKER_REPO}${IMAGE_NAME}:${TEST_IMAGE_TAG}" ${IMAGE_NAME} || true
    # Remove pulled images
    - docker rmi -f "${DOCKER_REPO}${IMAGE_NAME}:${TEST_IMAGE_TAG}" || true
    # Remove all images (current et previouslys build container missed) [Optional]
    #- docker images | awk -v pattern="${DOCKER_REPO}${IMAGE_NAME}" '{if( $1 ~ /^pattern/ ){ print $1":"$2; system(docker rmi -f $1":"$2) }}'


docker remove all temp files:
  stage: clean
  when: always
  cache:
    key: docker_lbi
  script:
    - rm -fr ${CI_COMMIT_SHA}/


python remove all temp files:
  stage: clean
  when: always
  cache:
    key: py_lbi
  script:
    - rm -fr .eggs .pytest_cache/ build/ dist/ htmlcov/ src/contatester.egg-info/
    - find . -name __pycache__ | xargs rm -fr